9.1  Clustering

# Summary of dataset in package

    1. head(mtcars)
# Finding distance Matrix

    1. distance_mat <- dist(mtcars, method = 'euclidean')

distance_mat


# Fitting Hierarchical clustering Model to training datasets
    1. set.seed(240)# Setting seed

Hierar_cl <- hclust(distance_mat, method = "average")
      Hierar_cl


# Plotting dendrogram
    1. plot(Hierar_cl)


# Choosing no. of clusters & Cutting tree by height
    1. abline(h = 110, col = "green")

fit <- cutree(Hierar_cl, k = 3 )

table(fit)

# Cutting tree bu no. of clusters
    1. rect.hclust(Hierar_cl, k = 3, border = "green")



9.2  k-Means clustering

install.packages("factoextra")

install.packages("cluster")

library(factoextra)

library(cluster) 

#load data
   df <- USArrests

#load data
   df <- USArrests


#scale each variable to have a mean of 0 and sd of 1
   df <- scale(df)

#view first six rows of dataset
 head(df)


Find the Optimal Number of Clusters
fviz_nbclust(df, kmeans, method = "wss")



Number of Clusters vs. Gap Statistic
#calculate gap statistic based on number of clusters
gap_stat <- clusGap(df,
+                     FUN = kmeans,
+                     nstart = 25,
+                     K.max = 10,
+                     B = 50)

Plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)

Perform K-Means Clustering with Optimal K
 #make this example reproducible
 set.seed(1)
 #perform k-means clustering with k = 4 clusters
 km <- kmeans(df, centers = 4, nstart = 25)

 #view results
 Km

From the results we can see that:
    • 16 states were assigned to the first cluster
    • 13 states were assigned to the second cluster
    • 13 states were assigned to the third cluster
    • 8 states were assigned to the fourth cluster
We can visualize the clusters on a scatterplot that displays the first two principal components on the axes using the fivz_cluster() function:

 #plot results of final k-means model
 fviz_cluster(km, data = df)

We can also use the aggregate() function to find the mean of the variables in each cluster:

 #find means of each cluster
 aggregate(USArrests, by=list(cluster=km$cluster), mean)




We can also append the cluster assignments of each state back to the original dataset:
 #add cluster assigment to original data
 final_data <- cbind(USArrests, cluster = km$cluster)

 #view final data
 head(final_data)












